/*
 * Copyright © 2015-2016, AnHui Mobiao technology co. LTD Inc. All Rights Reserved.
 */

package com.mo008.crdm.models.device;


import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.DbKit;
import com.jfinal.plugin.activerecord.Record;
import com.mo008.crdm.AppStartup;
import com.mo008.crdm.models.device.base.BaseDeviceData;
import com.mo008.util.SubmeterKit;
import com.xiaoleilu.hutool.util.StrUtil;

import org.joda.time.DateTime;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.SQLException;
import java.util.Date;
import java.util.List;

import goja.core.annotation.TableBind;
import goja.core.sqlinxml.SqlKit;

import static com.mo008.Constants.DEVICE_DATA_HISTORY;

/**
 * Generated by JFinal.
 *
 * @author Dark.Yang
 */
@TableBind(tableName = DEVICE_DATA_HISTORY)
public class DeviceDataHistory extends BaseDeviceData<DeviceDataHistory> {
    @SuppressWarnings("AlibabaConstantFieldShouldBeUpperCase")
    public static final DeviceDataHistory dao = new DeviceDataHistory();

    private static final long serialVersionUID = 1234387483667552048L;

    /**
     * DeviceDataHistory's Logger
     */
    private static final Logger LOGGER = LoggerFactory.getLogger(DeviceDataHistory.class);


    /**
     * 创建新的数据库表，主要针对mo_device_data_history表以及mo_car_gps表
     *
     * @param year 指定年份
     * @return 是否创建成功
     */
    public boolean createDataHistoryWithYear(int year) {

        final String sql = SqlKit.sql("deviceDataHistory.create.datahistory");
        String createHistorySql = SubmeterKit.converDataHistoryTable(sql, year);
        return Db.update(createHistorySql) >= 0;

    }

    /**
     * 创建新的数据库表，主要针对mo_device_data_history表以及mo_car_gps表
     *
     * @param year 指定年份
     * @return 是否创建成功
     */
    public boolean createGpsTableWith(int year) {
        final String sql = SqlKit.sql("deviceDataHistory.create.gps");
        String createGpsSql = SubmeterKit.converGpsTable(sql, year);
        return Db.update(createGpsSql) >= 0;
    }

    /**
     * 创建新的数据库表，主要针对mo_device_data_history表以及mo_car_gps表
     *
     * @param year 指定年份
     * @return 是否创建成功
     */
    public boolean createMinuteGpsTableWith(int year) {
        final String sql = SqlKit.sql("deviceDataHistory.create.gps.miniute");
        String createGpsSql = SubmeterKit.converMinuteGpsTable(sql, year);
        return Db.update(createGpsSql) >= 0;
    }

    /**
     * 删除指定日期的历史数据，主要针对mo_device_data_history表以及mo_car_gps表
     *
     * @param deleteDate 指定的删除日期
     * @return 是否删除 成功
     */
    public boolean deleteHistoryDataByDate(DateTime deleteDate) {

        Date startDate = deleteDate.millisOfDay().withMinimumValue().toDate();
        Date endDate = deleteDate.millisOfDay().withMaximumValue().toDate();

        final int year = deleteDate.getYear();

        final String historyByDateSql = SqlKit.sql("deviceDataHistory.delete.historyByDate");
        String deleteHistorySql = SubmeterKit.converDataHistoryTable(historyByDateSql, year);

        final String gpsByDateSql = SqlKit.sql("deviceDataHistory.delete.gpsByDate");
        String deleteGpsSql = SubmeterKit.converGpsTable(gpsByDateSql, year);

        return Db.update(deleteHistorySql, startDate, endDate) >= 0
                && Db.update(deleteGpsSql, startDate, endDate) >= 0;
    }

    /**
     * 删除历史数据库表
     *
     * @param truncateDate 指定的删除日期，会将指定日期所对应的年份表删除
     * @return 是否操作成功
     */
    public boolean truncateHistoryTable(DateTime truncateDate) {

        boolean success = false;

        final int year = truncateDate.getYear();
        final String submeterGpsTableName = SubmeterKit.submeterGpsTableName(year);
        final String dataHistoryTableName = SubmeterKit.submeterDataHistoryTableName(year);
        try {
            final String dbSchema = DbKit.getConfig().getConnection().getCatalog();
            final boolean gpsTableExist = SubmeterKit.checkExistTable(dbSchema, submeterGpsTableName);

            if (gpsTableExist) {
                success = Db.update("drop table " + submeterGpsTableName) >= 0;
                if (!success) {
                    LOGGER.error("删除历史表 {} 没有成功", submeterGpsTableName);
                }
            }
            if (success) {
                final boolean dataHistoryExist = SubmeterKit.checkExistTable(dbSchema, dataHistoryTableName);
                if (dataHistoryExist) {
                    success = Db.update("drop table " + dataHistoryTableName) >= 0;
                    if (!success) {
                        LOGGER.error("删除历史表 {} 没有成功", dataHistoryTableName);
                    }
                }
            }

            success = true;
        } catch (SQLException e) {
            LOGGER.error("删除表 {},{} 发生错误！ ", submeterGpsTableName, dataHistoryTableName, e);
            success = false;
        }


        return success;
    }

    /**
     * 获取处理日期之前的所有日期
     *
     * @param dealDate 指定日期
     * @return 数据库中的所有时间
     */
    public List<Date> getDeleteDates(DateTime dealDate) {

        dealDate = dealDate.millisOfDay().withMaximumValue();
        String dataHistoryTableName = SubmeterKit.submeterDataHistoryTableName(dealDate.getYear());
        String datesSql = StrUtil.format("select distinct date(report_time) from {} where report_time <= ? ", dataHistoryTableName);
        return Db.query(datesSql, dealDate.toDate());

    }

    /**
     * 获取mo_device_data_history表的列名
     *
     * @param dealDate 指定日期
     * @return 列名
     */
    public List<String> getHistoryColumns(DateTime dealDate) {

        dealDate = dealDate.millisOfDay().withMinimumValue();
        String database = AppStartup.connDataBaseSchema;
        String dataHistoryTableName = SubmeterKit.submeterDataHistoryTableName(dealDate.getYear());

        String columnNameSql = "select CONCAT('`',COLUMN_NAME,'`') from information_schema.COLUMNS where table_name = '{}' and table_schema =  '{}'";

        String sql = StrUtil.format(columnNameSql, dataHistoryTableName, database);
        return Db.query(sql);
    }

    /**
     * 读取mo_device_data_history表中满足条件的第一条数据的id，返回其上一个id
     *
     * @param dealDate 指定日期
     * @return 上一个id
     */
    public Long getHistoryFirstId(DateTime dealDate) {

        dealDate = dealDate.millisOfDay().withMinimumValue();
        String dataHistoryTableName = SubmeterKit.submeterDataHistoryTableName(dealDate.getYear());

        Date startDate = dealDate.millisOfDay().withMinimumValue().toDate();
        Date endDate = dealDate.millisOfDay().withMaximumValue().toDate();

        String sqlFormat = "select id from {} where report_time between ? and ? order by id limit 1";
        final String sql = StrUtil.format(sqlFormat, dataHistoryTableName);

        Long id = Db.queryLong(sql, startDate, endDate);
        if (id == null || id == 0) {
            return null;
        } else {
            return id - 1;
        }
    }

    /**
     * 分页读取mo_device_data_history表中的数据
     *
     * @param dealDate  指定日期
     * @param columnStr 列名
     * @param startId   开始ID
     * @return 数据
     */
    public List<Record> getHistoryData(DateTime dealDate, String columnStr, Long startId) {

        dealDate = dealDate.millisOfDay().withMinimumValue();
        String dataHistoryTableName = SubmeterKit.submeterDataHistoryTableName(dealDate.getYear());

        Date startDate = dealDate.millisOfDay().withMinimumValue().toDate();
        Date endDate = dealDate.millisOfDay().withMaximumValue().toDate();

        String sqlFormat = "select {} from {} where id > ?  and report_time between ? and ? order by id limit 10000";

        String sql = StrUtil.format(sqlFormat, columnStr, dataHistoryTableName);

        return Db.find(sql, startId, startDate, endDate);
    }

    /**
     * 获取mo_car_gps表的列名
     *
     * @param dealDate 指定日期
     * @return 列名
     */
    public List<String> getGpsColumns(DateTime dealDate) {

        dealDate = dealDate.millisOfDay().withMinimumValue();
        String gpsTableName = SubmeterKit.submeterGpsTableName(dealDate.getYear());

        String sqlFormat = "select CONCAT('`',COLUMN_NAME,'`') from information_schema.COLUMNS where table_name = '{}' and table_schema  = '{}'";
        final String sql = StrUtil.format(sqlFormat, gpsTableName, AppStartup.connDataBaseSchema);
        return Db.query(sql);
    }

    /**
     * 读取mo_car_gps表中满足条件的第一条数据的id，返回其上一个id
     *
     * @param dealDate 指定日期
     * @return gps 上一个id
     */
    public Long getGpsFirstId(DateTime dealDate) {

        final DateTime.Property millisOfDay = dealDate.millisOfDay();
        dealDate = millisOfDay.withMinimumValue();
        String gpsTableName = SubmeterKit.submeterGpsTableName(dealDate.getYear());


        String sqlFormat = "select id from {} where create_time between ? and ? order by id limit 1";
        final String sql = StrUtil.format(sqlFormat, gpsTableName);

        Date startDate = millisOfDay.withMinimumValue().toDate();
        Date endDate = millisOfDay.withMaximumValue().toDate();
        Long id = Db.queryLong(sql, startDate, endDate);
        if (id == null || id == 0) {
            return null;
        } else {
            return id - 1;
        }
    }

    /**
     * 分页读取mo_car_gps表中的数据
     *
     * @param dealDate  指定日期
     * @param columnStr 列名
     * @param startId   id
     * @return 数据
     */
    public List<Record> getGpsData(DateTime dealDate, String columnStr, Long startId) {

        final DateTime.Property millisOfDay = dealDate.millisOfDay();
        dealDate = millisOfDay.withMinimumValue();
        String gpsTableName = SubmeterKit.submeterGpsTableName(dealDate.getYear());

        Date startDate = millisOfDay.withMinimumValue().toDate();
        Date endDate = millisOfDay.withMaximumValue().toDate();

        String sqlFormat = "select {} from {} where id > ?  and create_time between ? and ? order by id limit 10000";

        final String sql = StrUtil.format(sqlFormat, columnStr, gpsTableName);
        return Db.find(sql, startId, startDate, endDate);
    }
}
