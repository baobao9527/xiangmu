/*
 * Copyright © 2015-2016, AnHui Mobiao technology co. LTD Inc. All Rights Reserved.
 */

package com.mo008.crdm.models.car;


import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import com.mo008.crdm.models.car.base.BaseCarGps;
import com.mo008.util.SubmeterKit;
import com.xiaoleilu.hutool.util.CollectionUtil;

import org.joda.time.DateTime;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Date;
import java.util.List;

import goja.core.annotation.TableBind;
import goja.core.sqlinxml.SqlKit;

/**
 * Generated by JFinal.
 *
 * @author Dark.Yang
 */
@TableBind(tableName = "mo_car_gps")
public class CarGps extends BaseCarGps<CarGps> {

    public static final CarGps dao = new CarGps();

    /**
     * CarGps's Logger
     */
    private static final Logger LOGGER           = LoggerFactory.getLogger(CarGps.class);
    private static final long   serialVersionUID = -6620687023175689973L;

    /**
     * 查询车辆最新的一条gps经纬度
     */
    public List<CarGps> findNewGPS(String swlat, String swlng, String nelat, String nelng) {
        final String sql = SqlKit.sql("carGps.getData");
        final String invokeSql = SubmeterKit.converGpsTable(sql);
        return find(invokeSql, swlat, nelat, swlng, nelng);
    }

    public List<CarGps> findForHotMap(String a, String b, String c, String d) {
        return find(SqlKit.sql("carGps.findForHotMap"), a, c, b, d);
    }

    public List<Record> findforhotmapSlave(String swlat, String swlng, String nelat, String nelng) {

        String sql = SqlKit.sql("carGps.findForHotMap");
        List<Record> records;
        final String gpsTable = SubmeterKit.converGpsTable(sql);
        records = Db.find(gpsTable, swlat, nelat, swlng, nelng);

        try {
            DateTime now = DateTime.now();
            int thisYear = now.getYear();
            int lastYear = thisYear - 1;
            final String lastYearSql = SubmeterKit.converGpsTable(sql, lastYear);
            final List<Record> lastYearRecords = Db.find(lastYearSql, swlat, nelat, swlng, nelng);
            if (CollectionUtil.isNotEmpty(lastYearRecords)) {
                records.addAll(lastYearRecords);
            }
        } catch (Exception ex) {
            LOGGER.error("执行热图查询SQL出错!", ex);
        }

        return records;
    }

    public List<CarGps> findForLocus(Date startDate, Date endDate, int deviceId) {
        final String sql = SqlKit.sql("carGps.findForLocus");
        final int year = new DateTime(startDate).getYear();
        final String invokeSql = SubmeterKit.converMinuteGpsTable(sql, year);
        return find(invokeSql, deviceId, startDate, endDate);
    }

    /**
     * 通过车牌号查询车辆的经纬度
     */
    public CarGps findByCarNo(String carNo) {

        final CarInfo carInfo = CarInfo.dao.findByCarNo(carNo);
        if (carInfo == null) {
            return null;
        }
        final Long deviceId = carInfo.getDeviceId();
        if (deviceId > 0) {
            final String sql = SqlKit.sql("carGps.findByDeviceId");
            final String invokeSql = SubmeterKit.converGpsTable(sql);
            final CarGps gps = findFirst(invokeSql, deviceId);
            LOGGER.info("invoke sql is  {} \n gps = {}", invokeSql,  gps);
            if (gps == null) {
                return null;
            }
            carInfo.remove("id");
            gps.put(carInfo);
            return gps;
        } else {
            return null;
        }
    }
}
